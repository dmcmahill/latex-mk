#!/bin/sh
#
# $Id: latex-mk.in,v 1.15 2003/05/29 09:23:30 dan Exp $
#
# Copyright (c) 2002, 2003 Dan McMahill
# All rights reserved.
#
# This code is derived from software written by Dan McMahill
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#        This product includes software developed by Dan McMahill
#  4. The name of the author may not be used to endorse or promote products
#     derived from this software without specific prior written permission.
# 
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
#  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#  SUCH DAMAGE.
#

VERSION=@VERSION@

MAXITERS=${MAXITERS:-5}
LATEX=${LATEX:-latex}
LATEX_FLAGS=${LATEX_FLAGS:-}
PDFLATEX=${PDFLATEX:-pdflatex}
PDFLATEX_FLAGS=${PDFLATEX_FLAGS:-}
BIBTEX=${BIBTEX:-bibtex}
BIBTEX_FLAGS=${BIBTEX_FLAGS:-}
LATEX_MK_LOG=${LOG:-latex-mk.log}

sep="------------------------------------"

ignore_errors=no

while test -n "$1"
do
	case "$1"
	in

	--clean)
		if [ -f $LATEX_MK_LOG ]; then
		    rm -f $LATEX_MK_LOG
		fi
		exit 0
		;;
		
	-h|--help)
		echo "latex-mk.  This is a wrapper script used by the LaTeX-Mk"
		echo "makefile system for LaTeX documents.  Its purpose is to"
		echo "run LaTeX the appropriate number of times to resolve all"
		echo "references and page changes associated with resolving"
		echo "references."
		exit 0
		;;

	--ignore-errors)
		ignore_errors=yes
		shift
		;;

	--pdflatex)
		LATEX=$PDFLATEX
		LATEX_FLAGS=$PDFLATEX_FLAGS
		shift
		;;

	--version)
		echo "latex-mk version $VERSION"
		exit 0
		;;

	-*)
		echo "unknown option: $1"
		exit 1
		;;

	*)
		break
		;;

	esac
done

INFILE=$1

if test -z "$INFILE" ; then
	echo "$0:   You must specify an input file"
	exit 1
fi

if test ! -f "${INFILE}" ; then
    INFILE=${INFILE}.tex
fi
if test ! -f "${INFILE}" ; then
	echo "$0:   Neither ${INFILE} nor ${INFILE}.tex exists"
	exit 1
fi
NAME=`basename ${INFILE} .tex`

cnt=0
bibcnt=0

while test $cnt -lt $MAXITERS ; do
	# run latex.  If it fails, manually remove the .dvi file since
	# latex won't.  This will confuse 'make' because on the next
	# invocation, the .dvi file will appear to be up to date already.
	( ( ( $LATEX $LATEX_FLAGS $INFILE 2>&1 ; echo $? >&4) | tee $LATEX_MK_LOG 1>&3) 4>&1 |  (read a; exit $a)) 3>&1
	if test $? -ne 0 -a "$ignore_errors" != "yes"  ; then
		echo "$sep" 
		echo "$0:  Error:  LaTeX failed" 
		echo "$sep"
		rm -f ${NAME}.dvi ${NAME}.pdf
		rm -f $LATEX_MK_LOG
		exit 1
	fi

	# if we need to run bibtex, we should end up with something like this:
	#LaTeX Warning: Citation `foo' on page 1 undefined on input line 2
	# and
	#LaTeX Warning: There were undefined references.
	#
	# After bibtex is run, we will get one more latex run that has a citation
	# complaint so we allow one more complaint from latex before declaring
	# that there is a problem with the citations.  Just in case someone
	# wants to keep running latex and viewing/printing the results with these
	# errors present, provide a way to override this.
	#
	needbib=`grep "Citation.*undefined" $LATEX_MK_LOG`
	if test -n "$needbib" ; then
		if test $bibcnt -eq 0 ; then
			echo "$sep"
			echo "$0:  Running bibtex to resolve citations"
			echo "$sep"
			bibtex_ran=yes
			$BIBTEX $BIBTEX_FLAGS $NAME
			if test $? -ne 0 -a "$ignore_errors" != "yes" ; then
				echo "$sep" 
				echo "$0:  Error:  BibTeX failed" 
				echo "$sep"
				rm -f ${NAME}.dvi ${NAME}.pdf
				rm -f $LATEX_MK_LOG
				exit 1
			fi
			# run the post-bibtex hook if its been defined
			if test "X$POST_BIBTEX_HOOK" != "X" ; then
			    if test -x $POST_BIBTEX_HOOK ; then
				exit_status=0
				. $POST_BIBTEX_HOOK $NAME
				# the post-bibtex hook script can set
				# exit_status to a non-zero value to 
				# abort the run
				if test $exit_status -ne 0 ; then
				    rm -f ${NAME}.dvi ${NAME}.pdf
				    rm -f $LATEX_MK_LOG
				    exit $exit_status
				fi
			    fi
			fi
		elif test $bibcnt -eq 1 ; then
			echo "$sep"
			echo "$0:  BibTeX has already been run, but LaTeX is still reporting"
			echo "    $needbib."
			echo "    Trying LaTeX one more time...."
			echo "$sep"
		elif test -n "$IGNORE_CITATION_WARNS" ; then
			echo "$sep"
			echo "$0:  WARNING:  BibTeX has already been run, but LaTeX is still reporting"
			echo "$0:  $needbib"
			echo "$0:  You have set the IGNORE_CITATION_WARNS variable to override this, but"
			echo "$0:  you probably do have an error in your citations."
			echo "$sep"
		else
			echo "$sep"
			echo "$0:  Error:  BibTeX has already been run, but LaTeX is still reporting"
			echo "$0:  $needbib"
			echo "$sep"
			rm -f $LATEX_MK_LOG
			if test "$ignore_errors" = "yes" ; then exit 0 ; else exit 1 ; fi
		fi
		bibcnt=`expr $bibcnt + 1`
	fi

	#LaTeX Warning: Label(s) may have changed. Rerun to get cross-references right
	rerun=`grep "Rerun to get" $LATEX_MK_LOG`
	if test -z "$rerun" -a -z "$needbib" ; then
		break;
	fi
	echo "$sep"
	echo "$0:   LaTeX references have changed, another latex run is needed"
	echo "$sep"
	cnt=`expr $cnt + 1`
done

#LaTeX Warning: There were undefined references.
undefined=`grep "There were undefined references" $LATEX_MK_LOG`
if test ! -z "$undefined" ; then
	echo "$sep"
	echo "$0:  There were undefined references.  Please correct this."
	echo "$0:  I have already made $cnt passes."
	#LaTeX Warning: Reference `tab:fuse_table' on page 3 undefined on input line 82.
	grep "Reference.*on page.*undefined" $LATEX_MK_LOG
	echo "$sep"
fi

if test $cnt -eq $MAXITERS ; then
	echo "$sep"
	echo "$0:   Failed to get LaTeX to converge after $MAXITERS tries"
	echo "$0:   Please fix the document or try again if you think it"
	echo "$0:   should be ok"
	echo "$sep"
	rm -f $LATEX_MK_LOG
	if test "$ignore_errors" = "yes" ; then exit 0 ; else exit 1 ; fi
fi

rm -f $LATEX_MK_LOG
exit 0

