\input texinfo   @c -*-texinfo-*-
@c $Id: latex-mk.texi,v 1.27 2003/05/27 10:56:53 dan Exp $
@c %**start of header
@setfilename latex-mk.info
@settitle LaTeX-Mk
@setcontentsaftertitlepage
@c %**end of header

@include version.texi

@dircategory LaTeX Project Tools
@direntry
* latex-mk: (latex-mk).		Managing LaTeX documents
@end direntry

@ifinfo
This file documents LaTeX-Mk-@value{VERSION}

Copyright @copyright{} 2002, 2003 Dan McMahill

@quotation
This code is derived from software written by Dan McMahill
This manual is derived from documentation written by Dan McMahill

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. All advertising materials mentioning features or use of this software
   must display the following acknowledgement:
       This product includes software developed by Dan McMahill
4. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.
@end quotation
@end ifinfo


@titlepage
@title LaTeX-Mk
@subtitle For version @value{VERSION}, @value{UPDATED}
@author Dan McMahill

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2002, 2003 Dan McMahill
@sp 2
@iftex
@smallformat
This code is derived from software written by Dan McMahill
This manual is derived from documentation written by Dan McMahill

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. All advertising materials mentioning features or use of this software
   must display the following acknowledgement:
       This product includes software developed by Dan McMahill
4. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS 
 OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.

@end smallformat
@end iftex
@end titlepage

@c Define an index of targets.
@defcodeindex tr
@c Define an index of variables.
@c @defcodeindex vn

@ifnottex
@node Top, Introduction, (dir), (dir)
@comment  node-name,  next,  previous,  up
@top LaTeX-Mk

This file documents the LaTeX-Mk package.  LaTeX-Mk is a
collection of Makefile fragments and shell scripts
for managing small to
large sized LaTeX projects.
This edition documents version @value{VERSION}.
@end ifnottex


@menu
* Introduction::                LaTeX-Mk's purpose
* Targets::                     Available Targets
* Variables::                   Variables
* HTML::                        HTML Output Support
* Obtaining::                   How to get LaTeX-Mk
* Installation::                How to configure and install LaTeX-Mk
* Feedback::                    How to contribute
* History::                     History
* Target Index::                Target Index
* Variable Index::              Variable Index
* General Index::               
@end menu

@page
@c @contents

@node Introduction, Targets, Top, Top
@chapter Introduction

LaTeX-Mk is a tool for managing small to large sized LaTeX projects.
The typical LaTeX-Mk input file is simply a series of variable
definitions 
in a @file{Makefile} for the project.  After creating a simple
@file{Makefile} the user can easily perform all required steps to
do such tasks as: preview the document, print the document, or produce a
PDF file.  LaTeX-Mk will keep track of files that have changed and how
to run the various programs that are needed to produce the output.

As a quick example, consider a project which has a single LaTeX file,
@file{mydoc.tex}, as its input.  To produce a @file{.pdf} file you might
use the following sequence of commands:
@example
latex mydoc.tex
latex mydoc.tex
latex mydoc.tex
dvips -Ppdf -j0 -o mydoc.ps mydoc.dvi
ps2pdf mydoc.ps mydoc.pdf
@end example
The triple invocation of @samp{latex} is to ensure that all references
have been properly resolved and any page layout changes due to inserting
the references have been accounted for.  The sequence of commands isn't
horrible, but it still is several commands and one of them,
@samp{dvips}, has some flags to remember.  To use LaTeX-Mk for this
project, you would create a @file{Makefile} that contains the following.
@example
NAME=mydoc

include /usr/local/share/latex-mk/latex.gmk
@end example
@cindex make, differences between GNU and BSD
@cindex GNU make, versus BSD make
@cindex BSD make, versus GNU make
@cindex include, Makefile syntax for
Note that the @code{include /usr/local/share/latex-mk/latex.gmk} is the
syntax for GNU @samp{make}.  If you are using BSD @samp{make} you would
replace the include line with 
@code{.include "/usr/local/share/latex-mk/latex.mk"}.  In both examples,
you would replace @code{/usr/local} with the installation prefix
on your system.  For the remainder of this document we will use the BSD
style of include in the examples.
Now to create a @file{.pdf} file you simply run
@samp{make pdf}.  For larger projects which may need to run programs to
export drawings to postscript files for inclusion or run BibTeX to
generate bibliographies, the generation of @file{.pdf} (or other) files
becomes increasingly complicated to run manually.  With LaTeX-Mk, such
operations are still very simple.

As a more complicated example, consider a project whose LaTeX input
is broken apart in to many @file{.tex} files which are all included by
@file{mydoc.tex}.  Also suppose the project 
includes a bibliography and a large number of figures created with the
Tgif program.  An example @file{Makefile} for this project might look
like:
@example
NAME=        mydoc
TEXSRCS=     ch1.tex ch2.tex ch3.tex refs.tex
BIBTEXSRCS=  mybib.bib
TGIFDIRS=    tgif_figs

.include "/usr/local/share/latex-mk/latex.mk"
@end example
In this example is it assumed that all of the Tgif figures reside in a
subdirectory called @file{tgif_figs}.  When the user issues a
@samp{make} command, all of the steps required to reformat the document
are taken.  Because of the dependency structure imposed by @samp{make},
only the steps which need to be taken are done.  This avoids
re-exporting a large number of figures which may have not changed, but
ensures that files which need processing are processed.

Hopefully this introduction has provided an adequate example for how
LaTeX-Mk can simplify the management of LaTeX based documents.  The
LaTeX-Mk system is simple enough for small projects and powerful enough
for large projects.  The remainder of this manual will provide complete
documentation on the use of LaTeX-Mk as well as configuration and
installation instructions.

@node Targets, Variables, Introduction, Top
@chapter Targets

LaTeX-Mk provides a fixed set of targets, the argument to the
@samp{make} command, for all projects.  The default target is
@samp{view} whose ultimate goal is to provide an on-screen preview of
the formatted document.  For additional information on the @samp{make}
program, please refer to the documentation for your copy of
@samp{make}. 

@section Base Targets
The targets provided by LaTeX-Mk are:

@deffn Target clean
@trindex clean
Cleans the current working directory by removing all LaTeX output and
other output files created during processing of the project.  In
addition, emacs @file{~} files are removed.
@end deffn

@deffn Target dvi
@trindex dvi
Performs all processing required to produce the @file{.dvi} file for the
project.
@end deffn

@deffn Target html
@trindex html
Performs all processing required to produce HTML output for the
project.
@end deffn

@deffn Target pdf
@trindex pdf
Performs all processing required to produce a PDF (Portable Document
Format) file, @file{.pdf}, for the project.
@end deffn

@deffn Target print
@trindex print
Sends the processed document to the printer.
@end deffn

@deffn Target ps
@trindex ps
Performs all processing required to produce a Postscript
file, @file{.ps}, for the project.
@end deffn

@deffn Target show-var
@trindex show-var
This target is used to help debug users Makefiles as well as the
LaTeX-Mk system.  This target displays the value of the variable whose
name is given by the variable VARNAME.  For example:
@example
  make show-var VARNAME=TEXSRCS
@end example
will display the value of the @code{TEXSRCS} variable.
@end deffn

@deffn Target view
@trindex view
Previews the @file{.dvi} file.
@end deffn

@deffn Target viewpdf
@trindex viewpdf
Previews the PDF (@file{.pdf}) file.
@end deffn

@deffn Target viewps
@trindex viewps
Previews the Postscript (@file{.ps}) file.
@end deffn

@section Draft Targets
LaTeX-Mk supports adding a DRAFT watermark and timestamp for the
Postscript, PDF, and printed output.  To produce the draft versions,
simply append @code{-draft} to the target.  The curently supported draft
targets are:
@deffn Target pdf-draft
@trindex pdf-draft
Draft version of the @code{pdf} target.
@end deffn
@deffn Target ps-draft
@trindex ps-draft
Draft version of the @code{ps} target.
@end deffn
@deffn Target print-draft
@trindex print-draft
Draft version of the @code{print} target.
@end deffn
@deffn Target viewpdf-draft
@trindex viewpdf-draft
Draft version of the @code{viewpdf} target.
@end deffn
@deffn Target viewps-draft
@trindex viewps-draft
Draft version of the @code{viewps} target.
@end deffn

@section Per Document Targets
LaTeX-Mk supports multiple top level documents in a single directory
controlled by a single makefile.  For each top level document specified
in the @code{NAME} variable (more on variables later), there will be a 
set of targets defined which are specific to the document.  The per
document targets are:
@deffn Target print_<name>
@trindex print_<name>
Prints the postscript file @file{<name>.ps}.
@end deffn
@deffn Target view_<name>
@trindex view_<name>
Previews the DVI file @file{<name>.dvi}.
@end deffn
@deffn Target viewpdf_<name>
@trindex viewpdf_<name>
Previews the PDF file @file{<name>.pdf}.
@end deffn
@deffn Target viewps_<name>
@trindex viewps_<name>
Previews the Postscript file @file{<name>.ps}.
@end deffn

In addition, draft versions of these targets exist:
@deffn Target print_<name>-draft
@trindex print_<name>-draft
Draft version of the @code{print_<name>} target.
@end deffn
@deffn Target ps_<name>-draft
@trindex ps_<name>-draft
Draft version of the @code{ps_<name>} target.
@end deffn
@deffn Target view_<name>-draft
@trindex view_<name>-draft
Draft version of the @code{view_<name>} target.
@end deffn
@deffn Target viewpdf_<name>-draft
@trindex viewpdf_<name>-draft
Draft version of the @code{viewpdf_<name>} target.
@end deffn
@deffn Target viewps_<name>-draft
@trindex viewps_<name>-draft
Draft version of the @code{viewps_<name>} target.
@end deffn


@node Variables, Obtaining, Targets, Top
@chapter Variables
The variables used by LaTeX-Mk can be categorized roughly into two
groups.  The first set of variables are typically set during the
installation of LaTeX-Mk and these defaults used for all projects.
These variables can be overridden on a per-user or per-project basis for
maximum flexibility.  The second set of variables are set by the user on
a per-project basis.

@section Site Configuration Variables
This section documents the variables which are typically set on a
site-wide or user-wide basis.

@subsection Site and User Configuration File
@defvar MAKECONF
This variable is set to the location of the site-wide configuration
file.  If this file exists, it is sourced at the beginning of the
LaTeX-Mk code.  Default is @file{$@{sysconfdir@}/latek-mk.conf} for BSD make and
@file{$@{sysconfdir@}/latex-gmk.conf} for GNU make.  This is where system administrators
can set system wide configuration variables.  Any variables defined
here should be defined using @code{VARIABLE?=  "new value"}
instead of @code{VARIABLE=  "new value"} so that individual users
can easily override the setting.  The default setting may be
changed during configuration of the package using the
@code{--with-mkconf} and @code{--with-gmkconf} flags to
@code{configure}.  The @code{sysconfdir} directory can be specified 
to @code{configure} with the @code{--sysconfdir=} option.
@end defvar

@defvar USER_MAKECONF
This variable is set to the location of a users personal configuration
file.  If this file exists, it is sourced at the beginning of the
LaTeX-Mk code.  Default is @file{$HOME/.latex-mk.conf} for BSD make and
@file{$HOME/.latex-gmk.conf} for GNU make.  This file is sourced before
the file specified by @code{MAKECONF}.  The default setting may be
changed during configuration of the package using the
@code{--with-usermkconf} and @code{--with-usergmkconf} flags to
@code{configure}. 
@end defvar

@subsection Generic Project Variables
This section documents the variables which are typically set on a
site-wide or user-wide basis.  In a typical installation these variables
do not need to be explicitly set as they will take on reasonable
defaults. 

@defvar BIBTEX
The bibtex executible.  Defaults to @samp{bibtex}.
@end defvar

@defvar BIBTEX_ENV
A list of variables to be set in the environment when bibtex
is run.  For example:
@example
BIBTEX_ENV+=	BIBINPUTS=.:/home/usr/bib:
@end example
Defaults to @samp{}.
@end defvar

@defvar BIBTEX_FLAGS
A list of flags to be passed to the BIBTEX executible.
Defaults to @samp{}.
@end defvar

@defvar DVIPDFM
The executible which produces PDF files from @file{.dvi} files.
Defaults to @samp{dvipdfm}.  Note that the default behaviour is to use
DVIPS to produce postscript and then PS2PDF to produce a PDF file.  To
use DVIPDFM to directly produce PDF from DVI, set the USE_DVIPDFM
variable. 
@end defvar

@defvar DVIPDFM_FLAGS
A list of flags to be passed to the DVIPDFM executible.
Defaults to @samp{}
@end defvar

@defvar DVIPS
The executible which produces postscript files from @file{.dvi} files.
Defaults to @samp{dvips}.
@end defvar

@defvar DVIPS_FLAGS
A list of flags to be passed to the DVIPS executible.
Defaults to @samp{-Ppdf -j0}.
@end defvar

@defvar GV
The executible which previews postscript files. 
Defaults to @samp{gv}.
@end defvar

@defvar GV_FLAGS
A list of flags to be passed to the GV executible.
Defaults to @samp{}.
@end defvar

@defvar HEVEA
The Hevea executible.
Defaults to @samp{hevea}.
@end defvar

@defvar HEVEA_ENV
A list of variables to be set in the environment when HEVEA
or IMAGEN is run.  For example:
@example
HEVEA_ENV+=	TEXINPUTS=.:/home/usr/tex:
@end example
Defaults to @samp{}.
@end defvar

@defvar HEVEA_FLAGS
A list of flags to be passed to the HEVEA executible.
Defaults to @samp{-fix}.
@end defvar

@defvar IMAGEN
The imagen  executible (part of HeVeA).
Defaults to @samp{imagen}.
@end defvar

@defvar LATEX
The LaTeX executible.
Defaults to @samp{latex}.
@end defvar

@defvar LATEX_ENV
A list of variables to be set in the environment when LATEX
is run.  For example:
@example
LATEX_ENV+=	TEXINPUTS=.:/home/usr/tex:
@end example
Defaults to @samp{}.
@end defvar

@defvar LATEX_FLAGS
A list of flags to be passed to the LATEX executible.
Defaults to @samp{}.
@end defvar

@defvar LATEX2HTML
The LaTex2HTML executible.
Defaults to @samp{latex2html}.
@end defvar

@defvar LATEX2HTML_ENV
A list of variables to be set in the environment when LATEX2HTML
is run.  For example:
@example
LATEX2HTML_ENV+=	TEXINPUTS=.:/home/usr/tex:
@end example
Defaults to @samp{}.
@end defvar

@defvar LATEX2HTML_FLAGS
A list of flags to be passed to the LATEX2HTML executible.
Defaults to @samp{-image_type png -local_icons -show_section_numbers}.
@end defvar

@defvar LPR
The executible which spools postscript files to a printer.
Defaults to @samp{lpr}.
@end defvar

@defvar LPR_FLAGS
A list of flags to be passed to the LPR executible.
For example:
@example
LPR_FLAGS=	-Pbeernuts
@end example
Defaults to @samp{}.
@end defvar

@defvar PDFLATEX
The PDFLaTeX executible.
Defaults to @samp{pdflatex}.
@end defvar

@defvar PDFLATEX_ENV
A list of variables to be set in the environment when PDFLATEX
is run.  For example:
@example
PDFLATEX_ENV+=	TEXINPUTS=.:/home/usr/tex:
@end example
Defaults to @samp{}.
@end defvar

@defvar PDFLATEX_FLAGS
A list of flags to be passed to the PDFLATEX executible.
Defaults to @samp{}.
@end defvar

@defvar PS2PDF
The executible which produces PDF (@file{.pdf}) files from postscript
(@file{.ps})  files.
Defaults to @samp{ps2pdf}.
@end defvar

@defvar PS2PDF_FLAGS
A list of flags to be passed to the PS2PDF executible.
Defaults to @samp{}.
@end defvar

@defvar USE_DVIPDFM
When set, this variable causes the DVIPDFM program to be used to
directly generate @file{.pdf} files from the @file{.dvi} files instead
of using DVIPS to generate a postscript file and then PS2PDF to convert
the postscript to PDF.  Please note that the use of this option
currently precludes the generation of the -draft versions of PDF files.
@end defvar

@defvar USE_HEVEA
When set, this variable causes the HEVEA program to be used to
generate HTML output.  
@end defvar

@defvar USE_LATEX2HTML
When set, this variable causes the LATEX2HTML program to be used to
generate HTML output. 
@end defvar

@defvar USE_PDFLATEX
When set, this variable causes the PDFLATEX program to be used to 
directly generate @file{.pdf} files from the @file{.tex} files instead
of using LATEX to generate a @file{.dvi} file, DVIPS to generate a
postscript file and then PS2PDF to convert 
the postscript to PDF.  Please note that the use of this option
currently precludes the generation of the -draft versions of PDF files.
@end defvar

@defvar VIEWPDF
The executible which previews @file{.pdf} files. 
Defaults to @samp{gv}.
@end defvar

@defvar VIEWPDF_FLAGS
A list of flags to be passed to the VIEWPDF executible.
Defaults to @samp{}.
@end defvar

@defvar XDVI
The executible which previews @file{.dvi} files. 
Defaults to @samp{xdvi}.
@end defvar

@defvar XDVI_FLAGS
A list of flags to be passed to the XDVI executible.
Defaults to @samp{}.
@end defvar

@subsection Tgif Site Configuration Variables
This section documents the variables related to Tgif file processing.
Tgif (@url{http://bourbon.usc.edu:8001/tgif/tgif.html}) 
is a nice vector drawing program which works well with LaTeX.
Please note that LaTeX-Mk requires that all Tgif files use the extension
@file{.obj}.  

@defvar TGIF
The tgif executible.
Defaults to @samp{tgif}.
@end defvar

@defvar TGIF_FLAGS
A list of flags to be passed to the TGIF executible to cause it to print
to an encapsulated postscript, @file{.eps}, file.
Defaults to @samp{-color -print -eps}.
@end defvar

@subsection Xfig Site Configuration Variables
This section documents the variables related to Xfig file processing.
Please note that LaTeX-Mk requires that all Xfig files use the extension
@file{.fig}.  

@defvar FIG2DEV
The executible which can convert xfig @file{.fig} files to encapsulated
postscript @file{.eps} files.
Defaults to @code{fig2dev}.
@end defvar

@defvar FIG2DEV_FLAGS
A list of flags to be passed to the FIG2DEV executible to cause it to print
to an encapsulated postscript, @file{.eps}, file.
@end defvar

@section Per-Project Variables
This section documents variables which can be set in project Makefiles
to accomodate other dependencies which may be added.

@subsection Required Variables
Every project must define the @code{NAME} variable.

@defvar NAME
Name of the project.  The top level LaTeX input file is assumed to be
called @file{<NAME>.tex}.  For projects which have multiple documents,
you would list the top level name for each document here.
For example, if you have a single document, @file{mydoc}, you would use
@example
NAME= mydoc
@end example
and if you have multiple documents, @file{mydoc1}, @file{mydoc2}, 
and @file{mydoc3}, you would use
@example
NAME= mydoc1 mydoc2 mydoc3
@end example
@end defvar

@subsection Generic Variables
The variables described in this section affect all of the top level 
documents listed in the @code{NAME} variable.  This is useful for
listing common dependencies like a header or style file used by all
documents.  To list dependencies which are specific to one of the top
level documents, you can use the variable @code{<docname>_<VARNAME>}
where @code{<docname>} is the name of the document and @code{<VARNAME>}
is the name of the variable.  For example,
@example
NAME= doc1 doc2
TEXSRCS= header.tex
doc1_TEXSRCS= intro1.tex body1.tex conclusions.tex
@end example
defines a project with two top level documents, @code{doc1} and
@code{doc2}.  Both documents depend on @file{header.tex} and in
addition, @code{doc1} depends on @file{intro1.tex}, @file{body1.tex},
and @code{conclusions.tex}.  More information on the @code{TEXSRCS}
variable is given later.

@defvar BIBTEXSRCS
All files listed in this variable are assumed to be BibTeX input files.
Listing files in this variable will cause a dependency to be
added to the top level project and BibTeX will be run on these files as
needed.
@end defvar

@defvar CLEAN_FILES
Files listed in this variable will be removed when the @code{clean}
target is made.  When setting this variable in a @file{Makefile}, the
@code{+=} syntax should be used to append to this variable.  For
example:
@example
CLEAN_FILES+=   my_leftover_file foo.bak
@end example
will add @file{my_leftover_file} and @file{foo.bak} to the list of files
to be removed when @samp{make clean} is run.
@end defvar

@defvar OTHER
Files listed in this variable will be added to the dependency list for
the @file{.dvi} file.  For example if you want to add all @file{.eps}
and @file{.epsi}
files in a particular directory to the dependency list, then using BSD
make, you could add:
@cindex make, differences between GNU and BSD
@cindex GNU make, versus BSD make
@cindex BSD make, versus GNU make
@cindex wildcard, Makefile syntax for
@example
OTHER_EPS!=     ls eps/*.eps*
OTHER+=         $(OTHER_EPS)
@end example
If you are using GNU make, you would use
@example
OTHER_EPS=      $(wildcard eps/*.eps*)
OTHER+=         $(OTHER_EPS)
@end example
@end defvar

@defvar TEXSRCS
All files listed in this variable are assumed to be LaTeX input files.
Listing files in this variable will cause a dependency to be
added to the top level project.  All LaTeX files used in the project
should be listed in this variable with the exception of the top level
LaTeX file which is automatically included by LaTeX-Mk.
@end defvar

@subsection Per-Project Tgif Variables
@defvar TGIFSRCS
All files listed in this variable are assumed to be tgif @file{.obj}
files.  Listing files in this variable will cause a dependency to be
added to the top level project and will cause these files to be
automatically re-exported to postscript as required.
@end defvar

@defvar TGIFDIRS
A list of directories containing tgif drawings can be listed in this
variable.  All @file{.obj} files found in those directories are assumed
to be tgif @file{.obj} files.  These files will be added to the top
level dependency list and will be
automatically re-exported to postscript as required.
@end defvar


@subsection Per-Project Xfig Variables
@defvar XFIGSRCS
All files listed in this variable are assumed to be xfig @file{.fig}
files.  Listing files in this variable will cause a dependency to be
added to the top level project and will cause these files to be
automatically re-exported to postscript as required.
@end defvar

@defvar XFIGDIRS
A list of directories containing xfig drawings can be listed in this
variable.  All @file{.fig} files found in those directories are assumed
to be xfig @file{.fig} files.  These files will be added to the top
level dependency list and will be
automatically re-exported to postscript as required.
@end defvar

@node HTML, Obtaining, Variables, Top
@chapter HTML Output
LaTeX-Mk includes support for generating HTML output.  Currently either
Latex2HTML (see @url{http://www.latex2html.org}) or HeVeA (see
@url{http://para.inria.fr/~maranget/hevea/}) can be used for producing
an HTML version of your document.  The selection of which program to
use is done with the USE_LATEX2HTML and USE_HEVEA variables.  Simply
define one of these in your @file{$@{sysconfdir@}/latex-mk.conf} file
(for site-wide configuration) or @file{$HOME/.latex-mk.conf} (for
per-user configuration).  If you are using GNU make, the variable would
be set in @file{$@{sysconfdir@}/latex-gmk.conf} or
@file{$HOME/.latex-gmk.conf} instead.  You can also override this
setting in your project @file{Makefile}. For example, to use Latex2HTML,
add
@example
USE_LATEX2HTML=  yes
@end example
to your configuration file or to your project @file{Makefile}.

To generate HTML output, simply run @samp{make html}.  The HTML output
along with any image files will be placed in a subdirectory called
@file{$\{NAME\}.html_dir}.  For example, if you have a project with two
top level documents, your @file{Makefile} might look like:
@example
NAME=  doc1 doc2
.include "/usr/pkg/share/latex-mk/latex.mk"
@end example
After running @samp{make html}, you will have two new subdirectories
called @file{doc1.html_dir} and @file{doc2.html_dir} containing HTML
versions of the two documents.

To keep track of which files have been generated during the conversion,
a temporary file, @file{$\{NAME\}.www_files} gets created and all
generated files are recorded there.  This allows the output produced by
HeVeA to be moved to the correct subdirectory as well as allowing
@samp{make clean} to work.

The HTML generation is still new and there are probably some bugs to
work out.  Please submit bug reports.  There are also some features
which may be useful that have not been integrated.  For example the
program @file{hacha} could be used for breaking the HeVeA output into
several smaller files.

@node Obtaining, Installation, HTML, Top
@chapter Obtaining LaTeX-Mk
The latest information and version of LaTeX-Mk can be found on the main
LaTeX-Mk
web site at @url{http://latex-mk.sourceforge.net}.
A package for the NetBSD operating system (see @url{http://www.netbsd.org} for
information about NetBSD)
exists at
@url{ftp://ftp.netbsd.org/pub/NetBSD/packages/pkgsrc/print/latex-mk/README.html}.

@node Installation, Feedback, Obtaining, Top
@comment  node-name,  next,  previous,  up
@chapter Installing LaTeX-Mk
@section System Requirements
To configure and install LaTeX-Mk, you will need a Unix-like operating
system or shell with a compatible make program.  In addition, to use
LaTeX-Mk, you will require:

@enumerate

@item
@code{latex}.  The development of LaTeX-Mk was done using Thomas Esser's
@TeX{} distribution, teTeX, version 1.0.7. More information on teTeX can
be found at @url{http://www.tug.org/tetex/}.

@item
Either GNU make version 3.80 or higher or a BSD make program.  
For information on GNU make, see
@url{http://www.gnu.org/software/make/}.  For information on the NetBSD
operating system (which of course includes BSD make), see
@url{http://www.netbsd.org}.  If you wish to install BSD make on a
non-BSD system, you can try downloading one of the bmake snapshots from
files area of the LaTeX-Mk sourceforge project page at
@url{http://www.sourceforge.net/projects/latex-mk}.

@end enumerate

@section Installation
Installation of LaTeX-Mk consists of three steps:  configuration,
building, and installing.  In a typical installation, this is as simple
as
@example
./configure
make
make install
@end example
This will configure LaTeX-Mk with the defaults, create the final files
to be installed, and install them in the proper location.  The
@file{configure} script is a standard GNU autoconf script.  The most
common option is the @samp{--prefix=<installation prefix>} option.  This
causes LaTeX-Mk to use @code{<installation prefix>} as the base
directory for the installation.  

Running @code{configure --help} will give a list of the available
configuration options.  The ones which are specific to LaTeX-Mk, as
opposed to being generic configure options are listed here.
@code{--with-mkconf=<mkconf>}:  this option changes the default system
configuration file for BSD make.  This file defaults to
@file{$@{sysconfdir@}/latex-mk.conf}.
@code{--with-gmkconf=<gmkconf>}:  this option changes the default system
configuration file for GNU make.  This file defaults to
@file{$@{sysconfdir@}/latex-gmk.conf}. 
@code{--with-usermkconf=<usermkconf>}:  this option changes the default 
user
configuration file for BSD make.  This file defaults to
@file{$HOME/.latex-mk.conf}.
@code{--with-usergmkconf=<usergmkconf>}:  this option changes the
default user
configuration file for GNU make.  This file defaults to
@file{$HOME/.latex-gmk.conf}. 

@node Feedback, History, Installation, Top
@chapter Feedback
@comment  node-name,  next,  previous,  up
@cindex BUGS, reporting
@cindex Reporting BUGS
@cindex E-mail, bug reports

To report bugs, provide feedback, suggest new features, etc. visit the
LaTeX-Mk Project management page at
@url{http://www.sourceforge.net/projects/latex-mk} or send email to the
author at @email{danmc@@users.sourceforge.net}.
For information on the current version of LaTeX-Mk, visit the LaTeX-Mk
homepage at @url{http://latex-mk.sourceforge.net}.

@comment  node-name,  next,  previous,  up
@node History, Target Index, Feedback, Top
@chapter History
@section The Dark Ages
In the beginning I used a WYSIWYG word processor from a large software
vendor in the Pacific Northwest of the US.  It worked for short papers,
it was horrible for medium to long documents, painful for equations,
and painful for figures.  Then I learned LaTeX and life was much much
better. 

@section The Giant Per-Project Makefile
In graduate school, a friend showed me a makefile he had set up for his
thesis.  It contained all sorts of targets and some intellegence about
running LaTeX multiple times for resolving references.  I made a
modified version of that for my thesis and even wrote a book
where I used yet another modified version of that makefile.  This
approach was much better than doing everything by hand because I had
added a lot of functionality over my friends makefile.  In particular,
my new makefile automatically dealt with tgif figures and I had many
many figures in the thesis and the book. 

Despite the utility of the large customized makefile I had, it was not
maintainable in the sense that every time I started a new document, I'd
end up with another copy of a very large makefile to maintain.  If I
fixed a bug in one, I'd have several other documents in progress which
needed updating.

@section Enter LaTeX-Mk
For those of you familiar with the build system used by the BSD
operating systems, you'll know that for each program, there is a very
simple makefile which lists the source files along with a couple of
other variables which can optionally be set.  Then a system makefile
called @file{bsd.prog.mk} is included.  That included makefile
fragment has all the code required to provide all the standard targets,
sets up the various compiler flags and correctly handles all the
dependencies.  It is maintainable because the bulk of the code is common
and only needs to be maintained in one place. 

Being inspired by the BSD style makefile approach, I converted my most
up to date giant per-project makefile into an @code{include}-able makefile
fragment and spent some time defining the interface a bit more
generically than I'd done in the past.  Since that time I've used the
result, LaTeX-Mk, for the last few documents at school, some papers I've
worked on since then and also for work related documentation.  So far,
the makefile framework has proven to be very useful and a big time saver
for me.  Since I believe in open-source software I felt it was
appropriate to document my efforts and provide a packaged solution that
others could also use.  

@section The Modern Era of LaTeX-Mk
@subsection Version 0.9
Released on 2002-10-09, this was the first public
release of LaTeX-Mk.  My reason for using 0.9 instead of 1.0 is that
LaTeX-Mk had not been tested or used much by others yet.  Even though it
works well for me, as with any product I'm sure others will quickly
find other ways to use it that I had not anticipated.  My goal is to
collect feedback over the first few months of public consumption and
come out with a 1.0 version which incorporates the primary improvements.

@subsection Version 0.9.1
This is a bug fix version released on 2002-10-29.
The significant changes over the previous
version are:
@itemize @bullet
@item
Per-document Xfig dependencies are now supported.  This was an oversight
in the previous version.

@item
A big non-portable GNU make hack has been removed.  Starting with this
@cindex GNU make, version required
version of LaTeX-Mk, you will need version 3.80 or newer of GNU make
(run @code{gmake --version} to check your GNU make version) if you are
using the GNU make interface to LaTeX-Mk.  The new implementation is
much cleaner and should continue to work with all newer versions of GNU
make. 

@item 
The history section of the manual was added.

@end itemize

@subsection Version 1.0
This is the long awaited 1.0 release!  Hopefully LaTeX-Mk can be considered
production/stable at this point.  This release was made on 2003-02-26.
The significant changes/additions over the previous version are:
@itemize @bullet
@item Support for dvipdfm
(see @url{http://gaspra.kettering.edu/dvipdfm}) is
included.  By setting the USE_DVIPDFM variable, the
@code{dvipdfm} program can be used to
generate @file{.pdf} files from the @file{.dvi} file generated by LaTeX.

@item Support for PDFLaTeX is
included.  By setting the USE_PDFLATEX variable, the
@code{pdflatex} program can be used to
generate @file{.pdf} files directly from the TeX sources.

@item A testsuite is now included.  This has resulted in the fixing of a handful of small
bugs and should greatly contribute to the reliability and stability of this tool.

@item Bugs related to processing multiple directories listed in TGIFDIRS and XFIGDIRS have
been fixed.

@item Bugs related to per-project processing of foo_TGIFDIRS and foo_XFIGDIRS have been fixed.

@item A bug in @code{latex-mk} relating to BibTeX has been
    fixed.  Previously, after a BibTeX run, @code{latex-mk} failed to run
    LaTeX the correct number of times.

@end itemize

@subsection Version 1.1
This is the "HTML Support" release.  Version 1.1 was released on 2003-??-??.
The significant changes/additions over the previous version are:
@itemize @bullet
@item Support for HTML output

@item Fixed a bug where bibtex was not run sometimes when it needed to
be run.  This problem showed up with some versions of LaTeX.
@end itemize

@page
@node Target Index, Variable Index, History, Top
@unnumbered Target Index

@printindex tr


@page
@node Variable Index, General Index, Target Index, Top
@unnumbered Variable Index

@printindex vr


@page
@node General Index,  , Variable Index, Top
@unnumbered General Index

@printindex cp

@bye

