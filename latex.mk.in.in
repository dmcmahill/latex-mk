# -*- Makefile -*-
# $Id: latex.mk.in.in,v 1.57 2006/06/09 18:30:37 dan Exp $ 
#
# Makefile fragment for handling LaTeX projects
#
# Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006 Dan McMahill
# All rights reserved.
#
# This code is derived from software written by Dan McMahill
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#        This product includes software developed by Dan McMahill
#  4. The name of the author may not be used to endorse or promote products
#     derived from this software without specific prior written permission.
# 
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
#  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#  SUCH DAMAGE.
#


#######################################
#
# README:
#
# To use this makefile fragment, set the variable:
#	NAME	= Top level project name.  Your top level LaTeX 
#		  file should be called $(NAME).tex
#
#	TEXSRCS	= Additional LaTeX input files (.tex)
#
# and add the line:
#	.include "latex.mk"
# in your top level Makefile
#
# The following variables may be overridden in your top level Makefile
#
#  BIBTEX	= the BibTeX executable
#  BIBTEX_ENV	= environment variables set when running the BibTeX executable
#  BIBEX_FLAGS	= flags passed to the BibTeX executable
#  CONVERT      = the 'convert' program which is part of ImageMagick
#  DVIPDFM      = the dvipdfm executable
#  DVIPDFM_ENV  = environment variables set when running the dvipdfm executable
#  DVIPDFM_FLAGS= flags passed to the dvipdfm executable
#  DVIPS	= the dvips executable
#  DVIPS_FLAGS	= flags passed to the dvips executable
#  GZIP		= gzip program
#  GV		= a postscript previewer executable
#  GV_FLAGS	= flags passed to the postscript previewer executable
#  JPG2EPS      = program and flags used to convert JPEG files to EPS
#  LATEX	= the LaTeX executable
#  LATEX_ENV	= environment variables set when running the LaTeX executable
#  LATEX_FLAGS	= flags passed to the LaTeX executable
#  LATEX2HTML   = LaTeX2HTML executable
#  LATEX2HTML_ENV
#               = environment variables set when running LATEX2HTML
#  LATEX2HTML_FLAGS
#               = flags passed to LATEX2HTML
#  LATEX2RTF    = LaTeX2RTF executable
#  LATEX2RTF_ENV
#               = environment variables set when running LATEX2RTF
#  LATEX2RTF_FLAGS
#               = flags passed to LATEX2RTF
#  LPR		= executable to print postscript files
#  LPR_FLAGS	= flags passed to the executable to print postscript files
#  MAKEIDX      = the makeindex executable
#  MAKEIDX_FLAGS= flags passed to the makeindex executable
#  PDFLATEX     = pdflatex executable
#  PDFLATEX_ENV = environment variables set when running the PDFLaTeX executable
#  PDFLATEX_FLAGS= flags passed to the PDFLaTeX executable
#  PNG2EPS      = program and flags used to convert PNG files to EPS
#  PS2PDF	= ps2pdf executable
#  PS2PDF_FLAGS	= flags passed to the ps2pdf executable
#  TAR          = tape archiver program
#  VIEWPDF      = PDF viewer
#  VIEWPDF_FLAGS= PDF viewer flags
#  XDVI		= a .dvi previewer executable
#  XDVI_FLAGS	= flags passed to the .dvi previewer executable
#
#  USE_DVIPDFM  = set to use dvipdfm to create pdf files from dvi
#                 instead of using dvips and ps2pdf
#  USE_PDFLATEX = set to use pdflatex to create pdf files from .tex
#                 files instead of using latex, dvips and ps2pdf
#
#######################################

GMK:# figure out the name of the Makefile.  We'll need this to include
GMK:# in the tar file created as part of the 'dist' target
GMK:MAKEFILE:=	$(word 1,${MAKEFILE_LIST})

BMK:MAKECONF?=	@MAKECONF@
BMK:USER_MAKECONF?=	@USERMAKECONF@
GMK:MAKECONF?=	@GMAKECONF@
GMK:USER_MAKECONF?=	@USERGMAKECONF@

BMK:.if exists(${MAKECONF})
BMK:.include "${MAKECONF}"
BMK:.endif
BMK:
BMK:.if exists(${USER_MAKECONF})
BMK:.include "${USER_MAKECONF}"
BMK:.endif

GMK:_CONFS= $(wildcard ${MAKECONF})
GMK:_CONFS+=        $(wildcard ${USER_MAKECONF})
GMK:include ${_CONFS}

# Make sure we set at least 1 way for creating html files
BMK:.if !defined(USE_HEVEA) && !defined(USE_TEX2PAGE)
GMK:ifndef USE_HEVEA
GMK:ifndef USE_TEX2PAGE
USE_LATEX2HTML=	YES
BMK:.endif
GMK:endif
GMK:endif

# The location of the latex-mk .mk and .gmk files
# we do this instead of hard coding so the package
# can be tested before installation by setting this
# variable in a test config file
LATEX_MK_DIR?=	@pkgdatadir@

AWK?=		@AWK@
BIBTEX?=	@BIBTEX@
CONVERT?=	@CONVERT@
DVIPDFM?=	@DVIPDFM@
DVIPDFM_ENV?=	
DVIPDFM_FLAGS+=	
DVIPDFM_LANDSCAPE_FLAGS?=	-l
DVIPS?=		@DVIPS@
DVIPS_FLAGS+=	-j0
DVIPS_LANDSCAPE_FLAGS?=	-t landscape
ECHO?=		@ECHO@
ENV_PROG?=	@ENV_PROG@
FALSE?=		@FALSE@
FIND?=		@FIND@
GREP?=		@GREP@
GV?=		@GV@
GV_FLAGS?=
GV_LANDSCAPE_FLAGS?=	-landscape
GZCAT?=		@GZCAT@
GZIP?=		@GZIP@
HACHA?=		@HACHA@
HACHA_ENV?=
HACHA_FLAGS?=
HEVEA?=		@HEVEA@
HEVEA_ENV?=
HEVEA_FLAGS?=	-fix
IMAGEN?=	@IMAGEN@
JPG2EPS?=	${CONVERT} 
LATEX_MK?=	@latexmkbindir@/latex-mk
LATEX_MK_FLAGS?=
LATEX?=		@LATEX@
LATEX_ENV?=	
LATEX2HTML?=	@LATEX2HTML@
LATEX2HTML_ENV?=
LATEX2HTML_FLAGS?=-image_type png -local_icons -show_section_numbers 
LATEX2RTF?=	@LATEX2RTF@
LATEX2RTF_ENV?=
LATEX2RTF_FLAGS?=
LPR?=		@LPR@
LPR_FLAGS?=	
MAKEIDX?=	@MAKEIDX@
MAKEIDX_FLAGS?=	
PDFLATEX?=	@PDFLATEX@
PDFLATEX_ENV?=	
PDFLATEX_FLAGS?=	
PNG2EPS?=	${CONVERT} 
POST_BIBTEX_HOOK?=
RM?=		@RM@
RMDIR?=		@RMDIR@
PS2PDF?=	@PS2PDF@
PS2PDF_FLAGS?=	
TAR?=		@TAR@
TEX2PAGE?=	@TEX2PAGE@
TEX2PAGE_ENV?=
TEX2PAGE_FLAGS?=
XDVI?=		@XDVI@
XDVI_FLAGS?=	
XDVI_LANDSCAPE_FLAGS?=	-paper usr
VIEWPDF?=	${GV}
VIEWPDF_FLAGS?=	${GV_FLAGS}
VIEWPDF_LANDSCAPE_FLAGS?=	${GV_LANDSCAPE_FLAGS}


DRAFT_STAMP_PS?=	draft_stamp.ps
DATED_DRAFT_PS?=	${LATEX_MK_DIR}/dated_draft.ps

BMK:.if !target(default)
.PHONY: default
default: all
BMK:.endif

BMK:.if !target(all)
.MAIN: all
.PHONY: all
all:: view-all
BMK:.endif

BMK:.if defined(LANDSCAPE)
GMK:ifdef LANDSCAPE
DVIPS_FLAGS+=	${DVIPS_LANDSCAPE_FLAGS}
DVIPDFM_FLAGS+=	${DVIPDFM_LANDSCAPE_FLAGS}
GV_FLAGS+=	${GV_LANDSCAPE_FLAGS}
XDVI_FLAGS+=	${XDVI_LANDSCAPE_FLAGS}
VIEWPDF_FLAGS+=	${VIEWPDF_LANDSCAPE_FLAGS}
BMK:.endif
GMK:endif

BMK:REAL_LATEX_ENV+=	LATEX=${LATEX:Q}
BMK:REAL_LATEX_ENV+=	LATEX_FLAGS=${LATEX_FLAGS}
BMK:REAL_LATEX_ENV+=	BIBTEX=${BIBTEX:Q}
BMK:REAL_LATEX_ENV+=	BIBTEX_FLAGS=${BIBTEX_FLAGS}
BMK:REAL_LATEX_ENV+=	MAKEIDX=${MAKEIDX:Q}
BMK:REAL_LATEX_ENV+=	MAKEIDX_FLAGS=${MAKEIDX_FLAGS}
BMK:REAL_LATEX_ENV+=	POST_BIBTEX_HOOK=${POST_BIBTEX_HOOK}
BMK:REAL_LATEX_ENV+=	${LATEX_ENV}
BMK:
BMK:REAL_PDFLATEX_ENV+=	PDFLATEX=${PDFLATEX:Q}
BMK:REAL_PDFLATEX_ENV+=	PDFLATEX_FLAGS=${PDFLATEX_FLAGS}
BMK:REAL_PDFLATEX_ENV+=	BIBTEX=${BIBTEX:Q}
BMK:REAL_PDFLATEX_ENV+=	BIBTEX_FLAGS=${BIBTEX_FLAGS}
BMK:REAL_PDFLATEX_ENV+=	MAKEIDX=${MAKEIDX:Q}
BMK:REAL_PDFLATEX_ENV+=	MAKEIDX_FLAGS=${MAKEIDX_FLAGS}
BMK:REAL_PDFLATEX_ENV+=	POST_BIBTEX_HOOK=${POST_BIBTEX_HOOK}
BMK:REAL_PDFLATEX_ENV+=	${PDFLATEX_ENV}
BMK:
BMK:REAL_TEX2PAGE_ENV+=	TEX2PAGE=${TEX2PAGE:Q}
BMK:REAL_TEX2PAGE_ENV+=	TEX2PAGE_FLAGS=${TEX2PAGE_FLAGS}
BMK:REAL_TEX2PAGE_ENV+=	BIBTEX=${BIBTEX:Q}
BMK:REAL_TEX2PAGE_ENV+=	BIBTEX_FLAGS=${BIBTEX_FLAGS}
BMK:REAL_TEX2PAGE_ENV+=	MAKEIDX=${MAKEIDX:Q}
BMK:REAL_TEX2PAGE_ENV+=	MAKEIDX_FLAGS=${MAKEIDX_FLAGS}
BMK:REAL_TEX2PAGE_ENV+=	POST_BIBTEX_HOOK=${POST_BIBTEX_HOOK}
BMK:REAL_TEX2PAGE_ENV+=	${TEX2PAGE_ENV}

GMK:REAL_LATEX_ENV+=	LATEX=${LATEX}
GMK:REAL_LATEX_ENV+=	LATEX_FLAGS=${LATEX_FLAGS}
GMK:REAL_LATEX_ENV+=	BIBTEX=${BIBTEX}
GMK:REAL_LATEX_ENV+=	BIBTEX_FLAGS=${BIBTEX_FLAGS}
GMK:REAL_LATEX_ENV+=	MAKEIDX=${MAKEIDX}
GMK:REAL_LATEX_ENV+=	MAKEIDX_FLAGS=${MAKEIDX_FLAGS}
GMK:REAL_LATEX_ENV+=	POST_BIBTEX_HOOK=${POST_BIBTEX_HOOK}
GMK:REAL_LATEX_ENV+=	${LATEX_ENV}
GMK:
GMK:REAL_PDFLATEX_ENV+=	PDFLATEX=${PDFLATEX}
GMK:REAL_PDFLATEX_ENV+=	PDFLATEX_FLAGS=${PDFLATEX_FLAGS}
GMK:REAL_PDFLATEX_ENV+=	BIBTEX=${BIBTEX}
GMK:REAL_PDFLATEX_ENV+=	BIBTEX_FLAGS=${BIBTEX_FLAGS}
GMK:REAL_PDFLATEX_ENV+=	MAKEIDX=${MAKEIDX}
GMK:REAL_PDFLATEX_ENV+=	MAKEIDX_FLAGS=${MAKEIDX_FLAGS}
GMK:REAL_PDFLATEX_ENV+=	POST_BIBTEX_HOOK=${POST_BIBTEX_HOOK}
GMK:REAL_PDFLATEX_ENV+=	${PDFLATEX_ENV}
GMK:
GMK:REAL_TEX2PAGE_ENV+=	TEX2PAGE=${TEX2PAGE}
GMK:REAL_TEX2PAGE_ENV+=	TEX2PAGE_FLAGS=${TEX2PAGE_FLAGS}
GMK:REAL_TEX2PAGE_ENV+=	BIBTEX=${BIBTEX}
GMK:REAL_TEX2PAGE_ENV+=	BIBTEX_FLAGS=${BIBTEX_FLAGS}
GMK:REAL_TEX2PAGE_ENV+=	MAKEIDX=${MAKEIDX}
GMK:REAL_TEX2PAGE_ENV+=	MAKEIDX_FLAGS=${MAKEIDX_FLAGS}
GMK:REAL_TEX2PAGE_ENV+=	POST_BIBTEX_HOOK=${POST_BIBTEX_HOOK}
GMK:REAL_TEX2PAGE_ENV+=	${TEX2PAGE_ENV}

# Include other .mk files often times used with LaTeX

#######################################
#
# Check for lgrind
#
#######################################

# Check for LGRINDSRCS and LGRINDDIRS

BMK:.if defined(LGRINDSRCS) || defined(LGRINDDIRS)
BMK:_USE_LGRIND_MK=	YES
BMK:.endif

GMK:ifdef LGRINDSRCS
GMK:_USE_LGRIND_MK+=	YES
GMK:endif
GMK:ifdef LGRINDDIRS
GMK:_USE_LGRIND_MK+=	YES
GMK:endif

# Check for proj_LGRINDSRCS and proj_LGRINDDIRS

BMK:.for __tmp__ in ${NAME}
BMK:.if defined(${__tmp__}_LGRINDSRCS) || defined(${__tmp__}_LGRINDDIRS)
BMK:_USE_LGRIND_MK=	YES
BMK:.endif
BMK:.endfor

GMK:
GMK:define add_lgrind_mk_template
GMK:ifdef $(1)_LGRINDSRCS
GMK:_USE_LGRIND_MK=	YES
GMK:endif
GMK:ifdef $(1)_LGRINDDIRS
GMK:_USE_LGRIND_MK=	YES
GMK:endif
GMK:endef
GMK:$(foreach __tmp__,$(NAME),$(eval $(call add_lgrind_mk_template,$(__tmp__))))

# pull in lgrind.[g]mk if needed

BMK:.if defined(_USE_LGRIND_MK)
BMK:.include "${LATEX_MK_DIR}/lgrind.mk"
BMK:.endif
GMK:ifdef _USE_LGRIND_MK
GMK:include ${LATEX_MK_DIR}/lgrind.gmk
GMK:endif

#######################################
#
# Check for tgif
#
#######################################

# Check for TGIFSRCS and TGIFDIRS

BMK:.if defined(TGIFSRCS) || defined(TGIFDIRS)
BMK:_USE_TGIF_MK=	YES
BMK:.endif

GMK:ifdef TGIFSRCS
GMK:_USE_TGIF_MK+=	YES
GMK:endif
GMK:ifdef TGIFDIRS
GMK:_USE_TGIF_MK+=	YES
GMK:endif

# Check for proj_TGIFSRCS and proj_TGIFDIRS

BMK:.for __tmp__ in ${NAME}
BMK:.if defined(${__tmp__}_TGIFSRCS) || defined(${__tmp__}_TGIFDIRS)
BMK:_USE_TGIF_MK=	YES
BMK:.endif
BMK:.endfor

GMK:
GMK:define add_tgif_mk_template
GMK:ifdef $(1)_TGIFSRCS
GMK:_USE_TGIF_MK=	YES
GMK:endif
GMK:ifdef $(1)_TGIFDIRS
GMK:_USE_TGIF_MK=	YES
GMK:endif
GMK:endef
GMK:$(foreach __tmp__,$(NAME),$(eval $(call add_tgif_mk_template,$(__tmp__))))

# pull in tgif.[g]mk if needed

BMK:.if defined(_USE_TGIF_MK)
BMK:.include "${LATEX_MK_DIR}/tgif.mk"
BMK:.endif
GMK:ifdef _USE_TGIF_MK
GMK:include ${LATEX_MK_DIR}/tgif.gmk
GMK:endif

#######################################
#
# Check for xfig
#
#######################################

# Check for XFIGSRCS and XFIGDIRS

BMK:.if defined(XFIGSRCS) || defined(XFIGDIRS)
BMK:_USE_XFIG_MK=	YES
BMK:.endif

GMK:ifdef XFIGSRCS
GMK:_USE_XFIG_MK+=	YES
GMK:endif
GMK:ifdef XFIGDIRS
GMK:_USE_XFIG_MK+=	YES
GMK:endif

# Check for proj_XFIGSRCS and proj_XFIGDIRS

BMK:.for __tmp__ in ${NAME}
BMK:.if defined(${__tmp__}_XFIGSRCS) || defined(${__tmp__}_XFIGDIRS)
BMK:_USE_XFIG_MK=	YES
BMK:.endif
BMK:.endfor

GMK:
GMK:define add_xfig_mk_template
GMK:ifdef $(1)_XFIGSRCS
GMK:_USE_XFIG_MK=	YES
GMK:endif
GMK:ifdef $(1)_XFIGDIRS
GMK:_USE_XFIG_MK=	YES
GMK:endif
GMK:endef
GMK:$(foreach __tmp__,$(NAME),$(eval $(call add_xfig_mk_template,$(__tmp__))))

# pull in xfig.[g]mk if needed

BMK:.if defined(_USE_XFIG_MK)
BMK:.include "${LATEX_MK_DIR}/xfig.mk"
BMK:.endif
GMK:ifdef _USE_XFIG_MK
GMK:include ${LATEX_MK_DIR}/xfig.gmk
GMK:endif

#######################################
#
# Targets
#
#######################################

#######################################
# target:  view_<proj>
#######################################

BMK:.for __tmp__ in ${NAME}
BMK:.PHONY: view_${__tmp__}
BMK:.if defined(USE_PDFLATEX)
BMK:view_${__tmp__}: viewpdf_${__tmp__}
BMK:.else
BMK:view_${__tmp__}: ${__tmp__}.dvi
BMK:	${XDVI:Q} ${XDVI_FLAGS} ${__tmp__}.dvi
BMK:.endif
BMK:DEFAULTVIEW?=	view_${__tmp__}
BMK:ALLVIEW+=	view_${__tmp__}
BMK:.endfor

GMK:define view_template
GMK:.PHONY: view_$(1)
GMK:ifdef USE_PDFLATEX
GMK:view_$(1): viewpdf_$(1)
GMK:else
GMK:view_$(1): $(1).dvi
GMK:	$(XDVI) $(XDVI_FLAGS) $(1).dvi
GMK:endif
GMK:ALLVIEW+= view_$(1)
GMK:DEFAULTVIEW?=	view_$(1)
GMK:endef
GMK:$(foreach __tmp__,$(NAME),$(eval $(call view_template,$(__tmp__))))

#######################################
# target:  viewps_<proj>
#######################################

BMK:.for __tmp__ in ${NAME}
BMK:.PHONY: viewps_${__tmp__}
BMK:viewps_${__tmp__}: ${__tmp__}.ps
BMK:	${GV:Q} ${GV_FLAGS}  ${__tmp__}.ps
BMK:DEFAULTVIEWPS?=	viewps_${__tmp__}
BMK:ALLVIEWPS+=	viewps_${__tmp__}
BMK:.PHONY: viewps_${__tmp__}-draft
BMK:viewps_${__tmp__}-draft: ${__tmp__}-draft.ps
BMK:	${GV:Q} ${GV_FLAGS}  ${__tmp__}-draft.ps
BMK:DEFAULTVIEWPS_DRAFT?=	viewps_${__tmp__}-draft
BMK:ALLVIEWPS_DRAFT+=	viewps_${__tmp__}-draft
BMK:${__tmp__}-draft.ps: ${__tmp__}.dvi ${DATED_DRAFT_PS}
BMK:	sed "s;DATE;`date`;g" ${DATED_DRAFT_PS:Q} > ${DRAFT_STAMP_PS:Q}
BMK:	${DVIPS:Q} -h ${DRAFT_STAMP_PS:Q} ${DVIPS_FLAGS} -o $@ ${__tmp__}.dvi
BMK:.endfor

GMK:define viewps_template
GMK:.PHONY: viewps_$(1)
GMK:viewps_$(1): $(1).ps
GMK:	$(GV) $(GV_FLAGS)  $(1).ps
GMK:DEFAULTVIEWPS?=	viewps_$(1)
GMK:ALLVIEWPS+=	viewps_$(1)
GMK:.PHONY: viewps_$(1)-draft
GMK:viewps_$(1)-draft: $(1)-draft.ps
GMK:	$(GV) $(GV_FLAGS)  $(1)-draft.ps
GMK:DEFAULTVIEWPS_DRAFT?=	viewps_$(1)-draft
GMK:ALLVIEWPS_DRAFT+=	viewps_$(1)-draft
GMK:$(1)-draft.ps: $(1).dvi ${DATED_DRAFT_PS}
GMK:	sed "s;DATE;`date`;g" ${DATED_DRAFT_PS} > ${DRAFT_STAMP_PS}
GMK:	$(DVIPS) -h ${DRAFT_STAMP_PS} $(DVIPS_FLAGS) -o $@ $(1).dvi
GMK:endef
GMK:$(foreach __tmp__,$(NAME),$(eval $(call viewps_template,$(__tmp__))))

#######################################
# target:  viewpdf_<proj>
#######################################

BMK:.for __tmp__ in ${NAME}
BMK:.PHONY: viewpdf_${__tmp__}
BMK:viewpdf_${__tmp__}: ${__tmp__}.pdf
BMK:	${VIEWPDF:Q} ${VIEWPDF_FLAGS}  ${__tmp__}.pdf
BMK:DEFAULTVIEWPDF?=	viewpdf_${__tmp__}
BMK:ALLVIEWPDF+=	viewpdf_${__tmp__}
BMK:.PHONY: viewpdf_${__tmp__}-draft
BMK:viewpdf_${__tmp__}-draft: ${__tmp__}-draft.pdf
BMK:	${VIEWPDF:Q} ${VIEWPDF_FLAGS}  ${__tmp__}-draft.pdf
BMK:DEFAULTVIEWPDF_DRAFT?=	viewpdf_${__tmp__}-draft
BMK:ALLVIEWPDF_DRAFT+=	viewpdf_${__tmp__}-draft
BMK:.endfor

GMK:define viewpdf_template
GMK:.PHONY: viewpdf_$(1)
GMK:viewpdf_$(1): $(1).pdf
GMK:	$(VIEWPDF) $(VIEWPDF_FLAGS)  $(1).pdf
GMK:DEFAULTVIEWPDF?=	viewpdf_$(1)
GMK:ALLVIEWPDF+=	viewpdf_$(1)
GMK:.PHONY: viewpdf_$(1)-draft
GMK:viewpdf_$(1)-draft: $(1)-draft.pdf
GMK:	$(VIEWPDF) $(VIEWPDF_FLAGS)  $(1)-draft.pdf
GMK:DEFAULTVIEWPDF_DRAFT?=	viewpdf_$(1)-draft
GMK:ALLVIEWPDF_DRAFT+=	viewpdf_$(1)-draft
GMK:endef
GMK:$(foreach __tmp__,$(NAME),$(eval $(call viewpdf_template,$(__tmp__))))

#######################################
# target:  print_<proj>
#######################################

BMK:.for __tmp__ in ${NAME}
BMK:.PHONY: print_${__tmp__}
BMK:print_${__tmp__}: ${__tmp__}.ps
BMK:	${LPR:Q} ${LPR_FLAGS} ${__tmp__}.ps
BMK:DEFAULTPRINT?=	print_${__tmp__}
BMK:ALLPRINT+=	print_${__tmp__}
BMK:.PHONY: print_${__tmp__}-draft
BMK:print_${__tmp__}-draft: ${__tmp__}-draft.ps
BMK:	${LPR:Q} ${LPR_FLAGS} ${__tmp__}-draft.ps
BMK:DEFAULTPRINT_DRAFT?=	print_${__tmp__}-draft
BMK:ALLPRINT_DRAFT+=	print_${__tmp__}-draft
BMK:.endfor


GMK:define print_template
GMK:.PHONY: print_$(1)
GMK:print_$(1): $(1).ps
GMK:	$(LPR) $(LPR_FLAGS) $(1).ps
GMK:DEFAULTPRINT?=	print_$(1)
GMK:ALLPRINT+=	print_$(1)
GMK:.PHONY: print_$(1)-draft
GMK:print_$(1)-draft: $(1)-draft.ps
GMK:	$(LPR) $(LPR_FLAGS) $(1)-draft.ps
GMK:DEFAULTPRINT_DRAFT?=	print_$(1)-draft
GMK:ALLPRINT_DRAFT+=	print_$(1)-draft
GMK:endef
GMK:$(foreach __tmp__,$(NAME),$(eval $(call print_template,$(__tmp__))))

#######################################

ALLTEXSRCS=	${TEXSRCS}
ALLBIBTEXSRCS=	${BIBTEXSRCS}

#######################################
#
# master name for the distfile
#
#######################################

BMK:.for __tmp__ in ${NAME}
BMK:.if defined(ALLNAME)
BMK:ALLNAME:=       ${ALLNAME}_${__tmp__}
BMK:.else
BMK:ALLNAME=        ${__tmp__}
BMK:.endif
BMK:.endfor

GMK:define distname_template
GMK:ifdef ALLNAME
GMK:ALLNAME:=       ${ALLNAME}_$(1)
GMK:else
GMK:ALLNAME=        $(1)
GMK:endif
GMK:endef
GMK:$(foreach __tmp__,$(NAME),$(eval $(call distname_template,$(__tmp__))))

BMK:.if ${ALLNAME} != ${NAME}
GMK:ifneq (${ALLNAME}, ${NAME})
dist:	${ALLNAME}.tar.gz
${ALLNAME}.tar.gz: ${NAME:=.tar.gz}
GMK:	${RM} -fr ${ALLNAME}
BMK:	${RM:Q} -fr ${ALLNAME:Q}
GMK:	mkdir ${ALLNAME}
BMK:	mkdir ${ALLNAME:Q}
	for f in ${NAME:=.tar.gz} ; do \
GMK:		${GZCAT} $$f | (cd ${ALLNAME} && ${TAR} xpf -) ; \
BMK:		${GZCAT:Q} $$f | (cd ${ALLNAME:Q} && ${TAR:Q} xpf -) ; \
	done
GMK:	${TAR} cf - ${ALLNAME} | ${GZIP} > $@
BMK:	${TAR:Q} cf - ${ALLNAME:Q} | ${GZIP:Q} > $@
GMK:	${RM} -fr ${ALLNAME}
BMK:	${RM:Q} -fr ${ALLNAME:Q}
GMK:	@${ECHO} "******* Distfile left in ${ALLNAME}.tar.gz *******"
BMK:	@${ECHO:Q} "******* Distfile left in ${ALLNAME}.tar.gz *******"
GMK:endif
BMK:.endif

#######################################
#
# add the dependencies for each documents .dvi file
#
#######################################

BMK:.for __tmp__ in ${NAME}
BMK:${__tmp__}.dvi:	${__tmp__}.tex ${TEXSRCS} ${${__tmp__}_TEXSRCS} ${OTHER} ${${__tmp__}_OTHER}
BMK:# some older bmake versions will fail on the empty test if these variables
BMK:# do not already exist
BMK:BIBTEXSRCS?=
BMK:${__tmp__}_BIBTEXSRCS?=
BMK:.if !empty(BIBTEXSRCS) || !empty(${__tmp__}_BIBTEXSRCS)
BMK:${__tmp__}.dvi:		${__tmp__}.bib-stamp
BMK:${__tmp__}.html-stamp:	${__tmp__}.bib-stamp
BMK:.endif
BMK:.if defined(USE_PDFLATEX)
BMK:${__tmp__}.pdf:	${__tmp__}.tex ${TEXSRCS} ${${__tmp__}_TEXSRCS} ${OTHER} ${${__tmp__}_OTHER}
BMK:.  if !empty(BIBTEXSRCS) || !empty(${__tmp__}_BIBTEXSRCS)
BMK:${__tmp__}.pdf:	${__tmp__}.bib-stamp
BMK:.  endif
BMK:.endif
BMK:${__tmp__}.html-stamp:	${__tmp__}.tex ${TEXSRCS} ${${__tmp__}_TEXSRCS} ${OTHER} ${${__tmp__}_OTHER}
BMK:${__tmp__}.bib-stamp:	${BIBTEXSRCS} ${${__tmp__}_BIBTEXSRCS}
BMK:	${ENV_PROG:Q} ${REAL_LATEX_ENV} ${LATEX_MK:Q} ${LATEX_MK_FLAGS} --bibtex ${__tmp__}.tex
BMK:	touch $@
BMK:
BMK:ALLTEXSRCS+=	${__tmp__}.tex ${${__tmp__}_TEXSRCS}
BMK:ALLBIBTEXSRCS+=	${${__tmp__}_BIBTEXSRCS}
BMK:dist:	${__tmp__}.tar.gz
BMK:dvi:	${__tmp__}.dvi
BMK:html:	${__tmp__}.html-stamp
BMK:.PHONY: ${__tmp__}.html
BMK:${__tmp__}.html:	${__tmp__}.html-stamp
BMK:
BMK:# latex2html needs latex to run first because it makes use of the
BMK:# .aux file.  It seems that tex2page and hevea do not require this.
BMK:.if defined(USE_LATEX2HTML)
BMK:${__tmp__}.html-stamp:	${__tmp__}.dvi
BMK:.endif
BMK:ps:	${__tmp__}.ps
BMK:pdf:	${__tmp__}.pdf
BMK:ps-draft:	${__tmp__}-draft.ps
BMK:pdf-draft:	${__tmp__}-draft.pdf
BMK:${__tmp__}.rtf:	${__tmp__}.dvi
BMK:rtf:	${__tmp__}.rtf
BMK:clean::
BMK:	if [ -f ${__tmp__}.www_files ]; then  \
BMK:		for f in `${AWK:Q} '{print $$2}' ${__tmp__}.www_files` ; do \
BMK:			if [ -f $$f ]; then ${RM:Q} -f $$f ; fi ;\
BMK:		done ;\
BMK:	fi
BMK:	${RM:Q} -f ${__tmp__}.www_files
BMK:.if defined(USE_LATEX2HTML)
BMK:	${RM:Q} -f ${__tmp__}.html_dir/images.aux
BMK:	${RM:Q} -f ${__tmp__}.html_dir/images.bbl
BMK:	${RM:Q} -f ${__tmp__}.html_dir/images.log
BMK:	${RM:Q} -f ${__tmp__}.html_dir/images.out
BMK:	${RM:Q} -f ${__tmp__}.html_dir/images.tex
BMK:.endif
BMK:	if [ -d ${__tmp__}.html_dir ]; then ${RMDIR:Q} ${__tmp__}.html_dir ; fi
BMK:
BMK:# And add dependencies for a source tarball
BMK:${__tmp__}_DIST+=	${__tmp__}.tex ${TEXSRCS} ${${__tmp__}_TEXSRCS} ${BIBTEXSRCS} ${${__tmp__}_BIBTEXSRCS} ${OTHER} ${${__tmp__}_OTHER} ${MAKEFILE} ${${__tmp__}_EXTRA_DIST} ${EXTRA_DIST}
BMK:ALL_DIST+=	${${__tmp__}_DIST}
BMK:
BMK:${__tmp__}.tar.gz: ${${__tmp__}_DIST}
BMK:	${TAR:Q} cf - ${${__tmp__}_DIST} | ${GZIP:Q} > $@
BMK:	@${ECHO:Q} "******* Distfile left in $@ *******"
BMK:.endfor

GMK:define dvideps_template
GMK:$(1).dvi:	$(1).tex ${TEXSRCS} ${$(1)_TEXSRCS} ${OTHER} ${$(1)_OTHER}
GMK:ifneq ($(strip $(BIBTEXSRCS)$($(1)_BIBTEXSRCS)),)
GMK:$(1).dvi:		$(1).bib-stamp
GMK:$(1).html-stamp:	$(1).bib-stamp
GMK:endif
GMK:ifdef USE_PDFLATEX
GMK:$(1).pdf:	$(1).tex ${TEXSRCS} ${$(1)_TEXSRCS} ${OTHER} ${$(1)_OTHER}
GMK:ifneq ($(strip $(BIBTEXSRCS)$($(1)_BIBTEXSRCS)),)
GMK:$(1).pdf:		$(1).bib-stamp
GMK:endif
GMK:endif
GMK:$(1).html-stamp:	$(1).tex ${TEXSRCS} ${$(1)_TEXSRCS} ${OTHER} ${$(1)_OTHER}
GMK:$(1).bib-stamp:	${BIBTEXSRCS} ${$(1)_BIBTEXSRCS}
GMK:	$(ENV_PROG) $(REAL_LATEX_ENV) $(LATEX_MK) $(LATEX_MK_FLAGS) --bibtex $(1).tex
GMK:	touch $(1).bib-stamp
GMK:
GMK:ALLTEXSRCS+=	$(1).tex ${$(1)_TEXSRCS}
GMK:ALLBIBTEXSRCS+=	${$(1)_BIBTEXSRCS}
GMK:dist:	$(1).tar.gz
GMK:dvi:	$(1).dvi
GMK:html:	$(1).html-stamp
GMK:# latex2html needs latex to run first because it makes use of the
GMK:# .aux file.  It seems that tex2page and hevea do not require this.
GMK:ifdef USE_LATEX2HTML
GMK:$(1).html-stamp:	$(1).dvi
GMK:endif
GMK:.PHONY: $(1).html
GMK:$(1).html:	$(1).html-stamp
GMK:ps:	$(1).ps
GMK:pdf:	$(1).pdf
GMK:ps-draft:	$(1)-draft.ps
GMK:pdf-draft:	$(1)-draft.pdf
GMK:$(1).rtf:	$(1).dvi
GMK:rtf:	$(1).rtf
GMK:clean::
GMK:	if [ -f $(1).www_files ]; then  \
GMK:		for f in `${AWK} '{print $$2}' $(1).www_files` ; do \
GMK:			if [ -f $$$$f ]; then ${RM} -f $$$$f ; fi ;\
GMK:		done ;\
GMK:	fi
GMK:	${RM} -f $(1).www_files
GMK:ifdef USE_LATEX2HTML
GMK:	${RM} -f $(1).html_dir/images.aux
GMK:	${RM} -f $(1).html_dir/images.bbl
GMK:	${RM} -f $(1).html_dir/images.log
GMK:	${RM} -f $(1).html_dir/images.out
GMK:	${RM} -f $(1).html_dir/images.tex
GMK:endif
GMK:	if [ -d $(1).html_dir ] ; then ${RMDIR} $(1).html_dir ; fi
GMK:
GMK:# And add dependencies for a source tarball
GMK:$(1)_DIST+=	$(1).tex ${TEXSRCS} ${$(1)_TEXSRCS} ${BIBTEXSRCS} ${$(1)_BIBTEXSRCS} ${OTHER} ${$(1)_OTHER} ${MAKEFILE} ${$(1)_EXTRA_DIST} ${EXTRA_DIST}
GMK:
GMK:endef
GMK:$(foreach __tmp__,$(NAME),$(eval $(call dvideps_template,$(__tmp__))))

GMK:define dist_template
GMK:ALL_DIST+=	$($(1)_DIST)
GMK:
GMK:$(1).tar.gz: $($(1)_DIST)
GMK:	${TAR} cf - ${$(1)_DIST} | ${GZIP} > $(1).tar.gz
GMK:	@${ECHO} "******* Distfile left in $(1).tar.gz *******"
GMK:
GMK:endef
GMK:$(foreach __tmp__,$(NAME),$(eval $(call dist_template,$(__tmp__))))

#######################################
# target:  view, view-all
#######################################

.PHONY: view
view: ${DEFAULTVIEW}
.PHONY: view-all
view-all: ${ALLVIEW}


#######################################
# target:  viewps, viewps-all
#######################################

.PHONY: viewps
viewps: ${DEFAULTVIEWPS}
.PHONY: viewps-all
viewps-all: ${ALLVIEWPS}

#######################################
# target:  viewpdf, viewpdf-all
#######################################

.PHONY: viewpdf
viewpdf: ${DEFAULTVIEWPDF}
.PHONY: viewpdf-all
viewpdf-all: ${ALLVIEWPDF}

#######################################
# target:  viewps-draft, viewps-all-draft
#######################################

.PHONY: viewps-draft
viewps-draft: ${DEFAULTVIEWPS_DRAFT}
.PHONY: viewps-all-draft
viewps-all-draft: ${ALLVIEWPS_DRAFT}

#######################################
# target:  viewpdf-draft, viewpdf-all-draft
#######################################

.PHONY: viewpdf-draft
viewpdf-draft: ${DEFAULTVIEWPDF_DRAFT}
.PHONY: viewpdf-all-draft
viewpdf-all-draft: ${ALLVIEWPDF_DRAFT}

#######################################
# target:  print, print-all
#######################################

.PHONY: print
print: ${DEFAULTPRINT}
.PHONY: print-all
print-all: ${ALLPRINT}

#######################################
# target:  print-draft, print-all-draft
#######################################

.PHONY: print-draft
print-draft: ${DEFAULTPRINT_DRAFT}
.PHONY: print-all-draft
print-all-draft: ${ALLPRINT_DRAFT}

#######################################
#
#######################################

.SUFFIXES : .tex .dvi .ps .pdf .rtf .html-stamp .png .jpg .eps

BMK:.if defined(IGNORE_LATEX_ERRORS)
GMK:ifdef IGNORE_LATEX_ERRORS
LATEX_MK_FLAGS+=	--ignore-errors
BMK:.endif
GMK:endif

#######################################
#
# Graphic file conversions
#
#######################################
.jpg.eps : 
GMK:	$(JPG2EPS) $< $@
BMK:	${JPG2EPS:Q} $< $@

.png.eps : 
GMK:	$(PNG2EPS) $< $@
BMK:	${PNG2EPS:Q} $< $@

#######################################
#
# Distribution output (tarfile)
#
#######################################
.PHONY: dist

#######################################
#
# DVI Output (latex)
#
#######################################
.PHONY: dvi
.tex.dvi : 
GMK:	$(ENV_PROG) $(REAL_LATEX_ENV) $(LATEX_MK) $(LATEX_MK_FLAGS) $<
BMK:	${ENV_PROG:Q} ${REAL_LATEX_ENV} ${LATEX_MK:Q} ${LATEX_MK_FLAGS} $<

#######################################
#
# HTML Output (latex2html or HeVeA)
#
#######################################

# note:  we have to use a time stamp file here to keep track of what files
# get created by the html conversion.  Neither latex2html nor hevea provide
# a convenient way to get a list of files to clean.  In addition, hevea
# does not currently provide a DESTDIR type functionality which is needed
# for dealing with multiple top level documents.


.PHONY: html
.tex.html-stamp : 
	touch $@1
BMK:.if defined(USE_LATEX2HTML)
GMK:ifdef USE_LATEX2HTML
GMK:	@${ECHO} LaTeX-Mk:  Creating HTML output using latex2html
GMK:	$(ENV_PROG) $(LATEX2HTML_ENV) $(LATEX2HTML) $(LATEX2HTML_FLAGS) -mkdir -dir $*.html_dir $<
BMK:	@${ECHO:Q} LaTeX-Mk:  Creating HTML output using latex2html
BMK:	${ENV_PROG:Q} ${LATEX2HTML_ENV} ${LATEX2HTML:Q} ${LATEX2HTML_FLAGS} -mkdir -dir $*.html_dir $<
BMK:.elif defined(USE_TEX2PAGE)
GMK:else
GMK:ifdef USE_TEX2PAGE
GMK:	@${ECHO} LaTeX-Mk:  Creating HTML output using tex2page
GMK:	${ECHO} "$*.html_dir" > $*.hdir
GMK:	$(ENV_PROG) $(REAL_TEX2PAGE_ENV) $(LATEX_MK) --tex2page $(LATEX_MK_FLAGS) $<
BMK:	@${ECHO:Q} LaTeX-Mk:  Creating HTML output using tex2page
BMK:	${ECHO:Q} "$*.html_dir" > $*.hdir
BMK:	${ENV_PROG:Q} ${REAL_TEX2PAGE_ENV} ${LATEX_MK:Q} --tex2page ${LATEX_MK_FLAGS} $<
BMK:.elif defined(USE_HEVEA)
GMK:else
GMK:ifdef USE_HEVEA
GMK:	@${ECHO} LaTeX-Mk:  Creating HTML output using HeVeA
BMK:	@${ECHO:Q} LaTeX-Mk:  Creating HTML output using HeVeA
	mkdir -p $*.html_dir
GMK:	-$(ENV_PROG) $(HEVEA_ENV) $(HEVEA) $(HEVEA_FLAGS) $< 
GMK:	-$(ENV_PROG) $(HEVEA_ENV) ${IMAGEN}  `basename $< .tex`
GMK:	-$(ENV_PROG) $(HEVEA_ENV) $(HEVEA) $(HEVEA_FLAGS) $< 
BMK:	-${ENV_PROG:Q} ${HEVEA_ENV} ${HEVEA:Q} $(HEVEA_FLAGS) $< 
BMK:	-${ENV_PROG:Q} ${HEVEA_ENV} ${IMAGEN:Q}  `basename $< .tex`
BMK:	-${ENV_PROG:Q} ${HEVEA_ENV} ${HEVEA:Q} $(HEVEA_FLAGS) $< 
BMK:.endif
GMK:endif
GMK:endif
GMK:endif
	if [ ! -f $*.www_files ]; then touch $*.www_files ; fi
GMK:	for f in `${FIND} . -type f \( -name \*.html -o -name \*.htm -o -name \*.gif \
BMK:	for f in `${FIND:Q} . -type f \( -name \*.html -o -name \*.htm -o -name \*.gif \
		-o -name \*.png -o -name \*.css -o -name \*.pl -o -name WARNINGS \
		-o -name \*.scm -o -name \*.hlog \) \
		-newer $@1 -print` ; do \
		fn=`basename $$f` ; \
GMK:		if ${GREP} "^$$f " $*.www_files >/dev/null ; then \
BMK:		if ${GREP:Q} "^$$f " $*.www_files >/dev/null ; then \
			echo "$$f already recorded" ; \
		else \
			echo "recording file $$f ($*.html_dir/$$fn)" ; \
			echo "$$f $*.html_dir/$$fn" >> $*.www_files ; \
		fi ;\
	done
BMK:.if defined(USE_TEX2PAGE)
GMK:ifdef USE_TEX2PAGE
GMK:	for f in `${FIND} . -type f \( -name \*-Z-G-\*.tex -o -name \*-Z-G-\*.aux \
BMK:	for f in `${FIND} . -type f \( -name \*-Z-G-\*.tex -o -name \*-Z-G-\*.aux \
		-o -name \*-Z-G-\*.log -o -name \*-Z-G-\*.dvi -o -name \*-Z-G-\*.ps \
		-o -name .Z\*.tex \) -newer $@1 -print` ; do \
		fn=`basename $$f` ; \
GMK:		if ${GREP} "^$$f " $*.www_files >/dev/null ; then \
BMK:		if ${GREP:Q} "^$$f " $*.www_files >/dev/null ; then \
			echo "$$f already recorded" ; \
		elif test "`dirname $$f`" != "." ; then \
			echo "$$f is not in this directory, skipping" ; \
		else \
			echo "recording file $$f (./$$fn)" ; \
			echo "$$f ./$$fn" >> $*.www_files ; \
		fi ;\
	done
BMK:.endif
GMK:endif
BMK:.if defined(USE_HEVEA)
GMK:ifdef USE_HEVEA
GMK:	for f in `${AWK} '{print $$1}' $*.www_files` ; do \
GMK:		${ECHO} "Moving $$f to $*.html_dir" ; mv $$f $*.html_dir ; \
BMK:	for f in `${AWK:Q} '{print $$1}' $*.www_files` ; do \
BMK:		${ECHO:Q} "Moving $$f to $*.html_dir" ; mv $$f $*.html_dir ; \
	done
BMK:.endif
GMK:endif
	mv $@1 $@

#######################################
#
# Postscript Output (dvips)
#
#######################################
.PHONY:  ps

# if we're doing a *-draft target, then add the 
# DRAFT watermark and time stamp
BMK:.if make(*-draft)
GMK:ifeq ($(findstring -draft,${MAKECMDGOALS}),-draft)
__DRAFT=	yes
BMK:.endif
GMK:endif

.dvi.ps :
BMK:.if defined(__DRAFT)
GMK:ifdef __DRAFT
GMK:	sed "s;DATE;`date`;g" ${DATED_DRAFT_PS} > ${DRAFT_STAMP_PS}
GMK	$(DVIPS) -h ${DRAFT_STAMP_PS} $(DVIPS_FLAGS) -o $*-draft.ps $<
BMK:	sed "s;DATE;`date`;g" ${DATED_DRAFT_PS:Q} > ${DRAFT_STAMP_PS:Q}
BMK:	${DVIPS:Q} -h ${DRAFT_STAMP_PS:Q} ${DVIPS_FLAGS} -o $*-draft.ps $<
BMK:.else
BMK:	${DVIPS:Q} ${DVIPS_FLAGS} -o $@ $<
GMK:else
GMK:	$(DVIPS) $(DVIPS_FLAGS) -o $@ $<
BMK:.endif
GMK:endif

#######################################
#
# PDF Output (ps2pdf)
#
#######################################
.PHONY:  pdf

BMK:.if defined(USE_DVIPDFM)
GMK:ifdef USE_DVIPDFM
.dvi.pdf :
GMK:	$(ENV_PROG) $(DVIPDFM_ENV) $(DVIPDFM) $(DVIPDFM_FLAGS) $<
BMK:	${ENV_PROG:Q} ${DVIPDFM_ENV} ${DVIPDFM:Q} ${DVIPDFM_FLAGS} $<
BMK:.elif defined(USE_PDFLATEX)
GMK:else
GMK:ifdef USE_PDFLATEX
.tex.pdf : 
GMK:	$(ENV_PROG) $(REAL_PDFLATEX_ENV) $(LATEX_MK) --pdflatex $(LATEX_MK_FLAGS) $<
BMK:	${ENV_PROG:Q} ${REAL_PDFLATEX_ENV} ${LATEX_MK:Q} --pdflatex ${LATEX_MK_FLAGS} $<
BMK:.else
GMK:else
.ps.pdf :
GMK:	$(PS2PDF) $(PS2PDF_FLAGS) $<
BMK:	${PS2PDF:Q} ${PS2PDF_FLAGS} $<
BMK:.endif
GMK:endif
GMK:endif

#######################################
#
# RTF (Rich Text Format) output (latex2rtf)
#
#######################################
.PHONY:  rtf

.dvi.rtf :
GMK:	$(ENV_PROG) $(LATEX2RTF_ENV) $(LATEX2RTF) $(LATEX2RTF_FLAGS) -o $@ $*.tex
BMK:	${ENV_PROG:Q} ${LATEX2RTF_ENV} ${LATEX2RTF:Q} ${LATEX2RTF_FLAGS} -o $@ $*.tex

#######################################
#
# Clean up (clean)
#
#######################################
CLEAN_FILES+=	${ALLTEXSRCS:.tex=.aux}
CLEAN_FILES+=	${BIBTEXSRCS:.bib=.aux}
CLEAN_FILES+=	${NAME:=.ps}
CLEAN_FILES+=	${NAME:=-draft.ps}
CLEAN_FILES+=	${NAME:=.pdf}
CLEAN_FILES+=	${NAME:=-draft.pdf}
CLEAN_FILES+=	${NAME:=.rtf}
CLEAN_FILES+=	${NAME:=.aux}
CLEAN_FILES+=	${NAME:=.log}
CLEAN_FILES+=	${NAME:=.dvi}
CLEAN_FILES+=	${NAME:=.log}
CLEAN_FILES+=	${NAME:=.bbl}
CLEAN_FILES+=	${NAME:=.blg}
CLEAN_FILES+=	${NAME:=.lof}
CLEAN_FILES+=	${NAME:=.lot}
CLEAN_FILES+=	${NAME:=.toc}
CLEAN_FILES+=	${NAME:=.out}
CLEAN_FILES+=	$(DRAFT_STAMP_PS)
CLEAN_FILES+=	${NAME:=.bib-stamp}

# HTML generation
CLEAN_FILES+=	${NAME:=.html-stamp}
CLEAN_FILES+=	${NAME:=.www_files}

BMK:.ifdef USE_HEVEA
GMK:ifdef USE_HEVEA
CLEAN_FILES+=	${NAME:=.haux}
CLEAN_FILES+=	${NAME:=.image.tex}
BMK:.endif
GMK:endif

BMK:.ifdef USE_LATEX2HTML
GMK:ifdef USE_LATEX2HTML
CLEAN_FILES+=	${NAME:=.haux}
CLEAN_FILES+=	${NAME:=.image.tex}
BMK:.endif
GMK:endif


BMK:.ifdef USE_TEX2PAGE
GMK:ifdef USE_TEX2PAGE
CLEAN_FILES+=	${NAME:=.hdir}
BMK:.endif
GMK:endif


.PHONY: clean

GMK:define latex_mk_clean_template
clean::
GMK:	${LATEX_MK} --clean $(1)
GMK:endef
GMK:$(foreach __tmp__,$(NAME),$(eval $(call latex_mk_clean_template,$(__tmp__)))) 

clean::
BMK:.for __tmp__ in ${NAME}
BMK:	${LATEX_MK:Q} --clean ${__tmp__}
BMK:.endfor
BMK:	${RM:Q} -f *~ texput.log ${CLEAN_FILES}
GMK:	$(RM) -f *~ texput.log $(CLEAN_FILES)

.PHONY: distclean
distclean: clean

#######################################
#
# Some helpful debugging targets
#
#######################################
.PHONY: show-var
show-var:
GMK:	@${ECHO} ${${VARNAME}}
BMK:	@${ECHO:Q} ${${VARNAME}}

